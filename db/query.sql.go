// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (
    source, destination
) VALUES (
  $1, $2
)
RETURNING id, source, destination
`

type CreateLinkParams struct {
	Source      string
	Destination string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, createLink, arg.Source, arg.Destination)
	var i Link
	err := row.Scan(&i.ID, &i.Source, &i.Destination)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  first_name, last_name, email, passhash, salt, phone_number
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, first_name, last_name, email, passhash, salt, phone_number
`

type CreateUserParams struct {
	FirstName   string
	LastName    string
	Email       string
	Passhash    string
	Salt        string
	PhoneNumber pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Passhash,
		arg.Salt,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Passhash,
		&i.Salt,
		&i.PhoneNumber,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, source, destination FROM links 
WHERE source = $1 LIMIT 1
`

func (q *Queries) GetLink(ctx context.Context, source string) (Link, error) {
	row := q.db.QueryRow(ctx, getLink, source)
	var i Link
	err := row.Scan(&i.ID, &i.Source, &i.Destination)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, passhash, salt, phone_number FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Passhash,
		&i.Salt,
		&i.PhoneNumber,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, passhash, salt, phone_number FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Passhash,
		&i.Salt,
		&i.PhoneNumber,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, email, passhash, salt, phone_number FROM users
ORDER BY first_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Passhash,
			&i.Salt,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set first_name = $2,
  last_name = $3,
  email = $4,
  passhash = $5,
  salt = $6,
  phone_number = $7
WHERE id = $1
`

type UpdateUserParams struct {
	ID          int64
	FirstName   string
	LastName    string
	Email       string
	Passhash    string
	Salt        string
	PhoneNumber pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Passhash,
		arg.Salt,
		arg.PhoneNumber,
	)
	return err
}
